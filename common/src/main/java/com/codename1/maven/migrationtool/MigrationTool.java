package com.codename1.maven.migrationtool;

import static com.codename1.maven.migrationtool.util.UIUtils.error;
import static com.codename1.ui.CN.*;
import static com.codename1.ui.ComponentSelector.$;

import com.codename1.io.Log;
import com.codename1.io.Preferences;
import com.codename1.maven.migrationtool.models.ProjectMigrationRequest;
import com.codename1.maven.migrationtool.util.MavenArtifact;
import com.codename1.maven.migrationtool.util.MavenWrapper;
import com.codename1.maven.migrationtool.views.MigrationToolForm;
import com.codename1.ui.*;
import com.codename1.ui.Dialog;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import org.apache.commons.io.FileUtils;
import org.codehaus.plexus.util.xml.pull.XmlPullParserException;

import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.util.Properties;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MigrationTool {

    private ProjectMigrationRequest model = new ProjectMigrationRequest();
    private MigrationToolForm view;

    public static String OS = System.getProperty("os.name").toLowerCase();
    public static boolean isWindows = (OS.indexOf("win") >= 0);


    protected static boolean isMac =  (OS.indexOf("mac") >= 0);
    protected static final String ARCH = System.getProperty("os.arch");

    protected static boolean isUnix = (OS.indexOf("nux") >= 0);

    private Form current;
    private Resources theme;


    private MavenArtifact codenameOneMavenPluginArtifact;

    private MavenArtifact getCodenameOneMavenPluginArtifact() {
        if (codenameOneMavenPluginArtifact == null) {
            codenameOneMavenPluginArtifact = new MavenArtifact("com.codenameone", "codenameone-maven-plugin");
        }
        return codenameOneMavenPluginArtifact;
    }

    private String usePluginVersion;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }

    private void handleSelectSourceProject(ActionEvent e) {
        EventQueue.invokeLater(()-> {
            File selected = showDirectoryChooser("Select Source Project", null);
            if (selected == null) return;
            CN.callSerially(()->{
                model.setSourceProjectPath(selected.getAbsolutePath());
                view.updateUI();
                view.revalidateWithAnimationSafety();
            });

            if (selected.exists()) {

                CN.scheduleBackgroundTask(()->{
                    if (isAppProject(selected)) {
                        try {
                            loadCodenameOneSettings();
                        } catch (IOException ex) {
                            Log.e(ex);
                        }

                        CN.callSerially(()->{
                            model.setProjectType(ProjectMigrationRequest.ProjectType.App);

                            view.updateUI();
                        });
                    } else {
                        CN.callSerially(()->{
                            model.setProjectType(ProjectMigrationRequest.ProjectType.Library);
                            view.updateUI();

                        });
                    }
                });
            }

        });
    }

    private void handleSelectDestinationDirectory(ActionEvent evt) {

        EventQueue.invokeLater(()->{
            File selected = showDirectoryChooser("Select Output Directory", null);
            if (selected == null) return;
            CN.callSerially(()->{
                model.setDestinationProjectPath(selected.getAbsolutePath());
                Preferences.set("destinationProjectPath", model.getDestinationProjectPath());
                view.updateUI();
                view.revalidateWithAnimationSafety();
            });
        });

    }

    private void handleCreateProject(ActionEvent e) {

        CN.callSerially(()->{
            model.setInProgress(true);
            view.updateUI();
            view.revalidateWithAnimationSafety();
            try {
                String sourceProject = model.getSourceProjectPath();
                if (sourceProject == null || sourceProject.isEmpty()) {
                    error(view.getSourceProjectPath(), "Please specify a project to migrate");
                    return;
                }
                File sourceProjectFile = new File(sourceProject);
                if (!sourceProjectFile.isDirectory()) {
                    error(view.getSourceProjectPath(), "Specified directory could not be found");
                    return;
                }


                String destProject = model.getDestinationProjectPath();
                if (destProject == null || destProject.isEmpty()) {
                    error(view.getDestinationProjectPath(), "Please select a destination directory");
                    return;
                }
                File destProjectFile = new File(destProject);
                if (!destProjectFile.isDirectory()) {
                    error(view.getDestinationProjectPath(), "Specified directory could not be found");
                    return;
                }
                view.getConsoleBuffer().setText("");
                if (isLibraryProject(sourceProjectFile)) {
                    String groupIdStr = model.getGroupId();
                    String artifactIdStr = model.getArtifactId();
                    if (groupIdStr == null || groupIdStr.isEmpty()) {
                        error(view.getGroupId(), "Please enter a group ID for your maven project");
                        return;
                    }
                    if (artifactIdStr== null || artifactIdStr.isEmpty()) {
                        error(view.getArtifactId(), "Please enter an artifact ID for your maven project");
                        return;
                    }

                    CN.invokeAndBlock(()->{
                        try {
                            File resultingProject = migrateLibraryProject(sourceProjectFile, groupIdStr, artifactIdStr, destProjectFile, model.isVerboseMode());
                            CN.callSerially(()->{

                                Dialog.show("Success", "Your maven project have been created at "+resultingProject.getAbsolutePath(), "OK", null);
                                if (Desktop.isDesktopSupported()) {
                                    try {
                                        Desktop.getDesktop().open(resultingProject);
                                    } catch (Exception ex){}
                                }
                            });
                        } catch (Exception ex) {
                            Log.e(ex);
                        }
                    });
                } else if (isAppProject(sourceProjectFile)) {
                    CN.invokeAndBlock(()->{
                        try {
                            File resultingProject = migrateAppProject(sourceProjectFile, destProjectFile, model.isVerboseMode());

                            CN.callSerially(()->{

                                Dialog.show("Success", "Your maven project have been created at "+resultingProject.getAbsolutePath(), "OK", null);
                                if (Desktop.isDesktopSupported()) {
                                    try {
                                        Desktop.getDesktop().open(resultingProject);
                                    } catch (Exception ex){}
                                }
                            });
                        } catch (Exception ex) {
                            Log.e(ex);
                        }
                    });
                }
            } finally {
                model.setInProgress(false);
                view.updateUI();
                view.revalidateWithAnimationSafety();

            }
        });


    }


    public void start() {
        if(current != null){
            current.show();
            return;
        }

        view = new MigrationToolForm(model, theme)
                .onBrowseForSourceProject(e->handleSelectSourceProject(e))
                .onBrowseForOutputProject(e-> handleSelectDestinationDirectory(e))
                .onCreateProject(e->handleCreateProject(e));

        view.show();
    }
    
    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }


    public void destroy() {
    }


    private File home() {
        return new File(System.getProperty("user.home"));
    }

    private File cn1Home() {
        return new File(home(), ".codenameone");
    }

    private File appHome() {
        return new File(cn1Home(), "MavenMigrationTool");
    }


    private boolean isAppProject(File project) {
        return project.exists() && new File(project, "codenameone_settings.properties").exists();
    }

    private boolean isLibraryProject(File project) {
        return project.exists() && new File(project, "codenameone_library_appended.properties").exists();
    }


    private File showDirectoryChooser(String title, File startDirectory) {

        if (!isMac) {
            JFileChooser chooser = new JFileChooser();
            chooser.setDialogTitle(title);
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            chooser.setVisible(true);
            int res = chooser.showOpenDialog(null);
            if (res != JFileChooser.APPROVE_OPTION) {
                return null;
            }
            File selectedFile = chooser.getSelectedFile();
            return selectedFile;
        } else {
            System.setProperty("apple.awt.fileDialogForDirectories", "true");
            FileDialog dlg = new FileDialog((Frame) null, title, FileDialog.LOAD);
            dlg.setModal(true);
            dlg.setVisible(true);

            System.setProperty("apple.awt.fileDialogForDirectories", "true");

            String resultF = dlg.getFile();
            if (resultF == null) {
                return null;
            }
            File f = new File(dlg.getDirectory() + File.separator + dlg.getFile());
            if (f.exists()) {
                return f;
            }
            return null;
        }

    }

    private boolean useLatestPluginVersion() {
        return (usePluginVersion == null || usePluginVersion.isEmpty() || "LATEST".equalsIgnoreCase(usePluginVersion));
    }

    private void loadCodenameOneSettings() throws IOException {
        File cn1Settings = new File(model.getSourceProjectPath(), "codenameone_settings.properties");
        Properties cn1SettingsProperties = new Properties();
        try (InputStream input = new FileInputStream(cn1Settings)) {
            cn1SettingsProperties.load(input);
        }

        String packageName = cn1SettingsProperties.getProperty("codename1.packageName");
        String mainName = cn1SettingsProperties.getProperty("codename1.mainName");
        model.setPackageName(packageName);
        model.setMainName(mainName);
        if (!CN.isEdt()) {
            CN.callSerially(()->{
                view.updateUI();
            });
        } else {
            view.updateUI();
        }
    }

    private File migrateAppProject(File sourceProject, File outputDirectory, boolean verbose) throws IOException, XmlPullParserException {

        String version = useLatestPluginVersion() ? getCodenameOneMavenPluginArtifact().findLatestVersionOnMavenCentral() : usePluginVersion;
        File tempDir = MavenWrapper.createTempDirectory("tmpappproject", "");

        try {

            String packageName = model.getPackageName();
            String mainName = model.getMainName();
            if (packageName == null) {
                throw new IOException("Cannot find codename1.packageName property in the codenameone_settings.properties file");
            }
            if (mainName == null) {
                throw new IOException("Cannot find codename1.mainName property in the codenameone_settings.properties file");
            }

            String artifactId = mainName.toLowerCase();
            String groupId = packageName;

            MavenWrapper mvnw = createMavenWrapper(tempDir);


            int result = mvnw.exec("com.codenameone:codenameone-maven-plugin:" + version + ":generate-app-project",
                    "-DarchetypeGroupId=com.codenameone",
                    "-DarchetypeArtifactId=cn1app-archetype",
                    "-DarchetypeVersion=" + version,
                    "-DartifactId=" + artifactId,
                    "-DgroupId=" + groupId,
                    "-Dversion=1.0-SNAPSHOT",
                    "-DmainName=" + mainName,
                    "-DinteractiveMode=false",
                    "-DsourceProject=" + sourceProject.getAbsolutePath(),
                    "-Dcn1Version=" + version,
                    "-U",
                    verbose ? "-X" : "-e");

            if (result != 0) {
                throw new IOException("Maven execution failed.  Check the log output");
            }
            File resultFile = new File(tempDir, artifactId);
            File copyTo = new File(outputDirectory, artifactId);
            int index = 2;
            while (copyTo.exists()) {
                copyTo = new File(outputDirectory, artifactId + (index++));
            }
            if (resultFile.exists()) {
                FileUtils.copyDirectory(resultFile, copyTo);
            }

            return copyTo;



        } finally {
            try {
                FileUtils.deleteDirectory(tempDir);
            } catch (Exception ex){}
        }

    }

    private MavenWrapper createMavenWrapper(File projectDir) {
        MavenWrapper mvnw = new MavenWrapper(projectDir);
        mvnw.output(new Writer() {
            StringBuffer buffer = new StringBuffer();
            @Override
            public void write(char[] cbuf, int off, int len) throws IOException {
                buffer.append(cbuf, off, len);

            }

            @Override
            public void flush() throws IOException {
                String line = buffer.toString();
                Log.p(line);
                buffer.setLength(0);
                CN.callSerially(() -> {
                    view.appendToConsole(line);
                });
            }

            @Override
            public void close() throws IOException {

            }
        });
        return mvnw;
    }

    private File migrateLibraryProject(File sourceProject, String groupId, String artifactId, File outputDirectory, boolean verbose) throws IOException, XmlPullParserException {

        String version = useLatestPluginVersion() ? getCodenameOneMavenPluginArtifact().findLatestVersionOnMavenCentral() : usePluginVersion;
        File tempDir = MavenWrapper.createTempDirectory("tmpappproject", "");

        try {
            MavenWrapper mvnw = createMavenWrapper(tempDir);
            int result = mvnw.exec("com.codenameone:codenameone-maven-plugin:" + version + ":generate-cn1lib-project",
                    "-DsourceProject=" + sourceProject.getAbsolutePath(),
                    "-DgroupId=" + groupId,
                    "-DartifactId=" + artifactId,
                    "-Dversion=1.0-SNAPSHOT",
                    "-U",
                    verbose ? "-X" : "-e",
                    "-DinteractiveMode=false");

            if (result != 0) {
                throw new IOException("Maven execution failed.  Check the log output");
            }

            File resultFile = new File(tempDir, artifactId);
            File copyTo = new File(outputDirectory, artifactId);
            int index = 2;
            while (copyTo.exists()) {
                copyTo = new File(outputDirectory, artifactId + (index++));
            }
            if (resultFile.exists()) {
                FileUtils.copyDirectory(resultFile, copyTo);
            }

            return copyTo;
        } finally {
            try {
                FileUtils.deleteDirectory(tempDir);
            } catch (Exception ex){}
        }

    }



}
